html {
	position: relative;
	min-height: 100%;
}

/* header height sets static height needed for the video to be rendered in browser view port
 * for height in percent to work parent container needs to have percent value in this case body was given 100% height
*/
header{
	height: 90%;
	position: relative;
	background-color: red;
}

header li a {
	color: #222222;
	font-size: 17px;
	font-weight: 200;
}

body {
	background: #dddddd;
	margin-bottom: 150px;
	height: 100%;
}

footer {
	position: absolute;
	bottom: 0;
	width: 100%;
	padding-top: 15px;
	background-color: #cccccc;
	font-size: 20px;
	height: 150px;
}

footer .col-sm-4 {
	display: flex;
	color: #222222;
}

footer ul {
	list-style: none;
}

footer h6 {
	text-align: center;
}

#logo {
	position: absolute;
	right: 0;
	top: -25px;
	left: 275px;
}

#contactinfo div {
	margin-left: 10px;
	font-size: 12px;
}

.nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus {
    color: #000000;
    background-color: transparent;
}

.navbar-fixed-top {
	background-color: #cccccc;
	height: 50px;
	padding-top: 2.5px;
	padding-right: 1px;
	padding-left: 1px;
}

header .active {
	font-weight: bold;
}

.sliding-middle-out {
	display: inline-block;
	position: relative;
	padding-bottom: 3px;
}

.sliding-middle-out:after {
	content: '';
	display: block;
	margin: auto;
	height: 5px;
	width: 0px;
	background: transparent;
	transition: width .5s ease, background-color .5s ease;
}

.sliding-middle-out:hover:after {
	width: 100%;
	background: black;
}

/* hero_area div containing video needs to be the size of parent div height, thus top, left, right, bottom helps to stretch hero_area div to the size of parent by giving position absolute.
 * overflow hides the video over-flowing outside the current size of hero_area. this can be helpful to control the visible part of video by pulling it using position value in video (top / bottom/ left/ right).
*/

.hero_area{
	bottom: 0;
	left: 0;
	right: 0;
	top: 0;
	position: absolute;
	overflow: hidden;
}

audio, canvas, video{
	display: inline-block;
}

/* here bottom value can be set to 0 to always match the buttom part of the video with the buttom part of the containing div, in our case hero_area. I have used negative -150px to pull the video downward so that i can chop some unwanted area which overflow of parent(hero_area) will hide.
* as width is set to 100%, and height to auto, as the width of the browser changes height is auto calculated making the video responsive
*/

.hero_area video{
	position: absolute;
	width: 100%;
	height: auto;
}

.logo img {
	width: 30% \9; /*Force IE10 and below to size SVG images correctly*/
	max-width: 30%;
}

@media (max-width:480px) { 
	.logo img {
	    width: 70% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 70% !important;
	}
}

@media (max-width:400px) { 
	.logo img {
	    width: 75% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 75%;
	}
}

@media (max-width:385px) { 
	.logo img {
	    width: 70% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 70%;
	}
}

@media (max-width:345px) { 
	.logo img {
	    width: 65% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 65%;
	}
}

@media (max-width:335px) { 
	.logo img {
	    width: 60% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 60%;
	}
}

@media (max-width:325px) { 
	.logo img {
	    width: 55% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 55%;
	}
}

@media (max-width:315px) { 
	.logo img {
	    width: 50% \9; /*Force IE10 and below to size SVG images correctly*/
	    max-width: 50%;
	}
}
